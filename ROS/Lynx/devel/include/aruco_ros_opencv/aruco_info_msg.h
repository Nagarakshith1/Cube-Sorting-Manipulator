// Generated by gencpp from file aruco_ros_opencv/aruco_info_msg.msg
// DO NOT EDIT!


#ifndef ARUCO_ROS_OPENCV_MESSAGE_ARUCO_INFO_MSG_H
#define ARUCO_ROS_OPENCV_MESSAGE_ARUCO_INFO_MSG_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace aruco_ros_opencv
{
template <class ContainerAllocator>
struct aruco_info_msg_
{
  typedef aruco_info_msg_<ContainerAllocator> Type;

  aruco_info_msg_()
    : x_position()
    , y_position()
    , z_position()
    , tf()
    , angle()
    , aruco_id()
    , visible_aruco(0)  {
    }
  aruco_info_msg_(const ContainerAllocator& _alloc)
    : x_position(_alloc)
    , y_position(_alloc)
    , z_position(_alloc)
    , tf(_alloc)
    , angle(_alloc)
    , aruco_id(_alloc)
    , visible_aruco(0)  {
  (void)_alloc;
    }



   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _x_position_type;
  _x_position_type x_position;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _y_position_type;
  _y_position_type y_position;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _z_position_type;
  _z_position_type z_position;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _tf_type;
  _tf_type tf;

   typedef std::vector<int16_t, typename ContainerAllocator::template rebind<int16_t>::other >  _angle_type;
  _angle_type angle;

   typedef std::vector<uint8_t, typename ContainerAllocator::template rebind<uint8_t>::other >  _aruco_id_type;
  _aruco_id_type aruco_id;

   typedef uint16_t _visible_aruco_type;
  _visible_aruco_type visible_aruco;




  typedef boost::shared_ptr< ::aruco_ros_opencv::aruco_info_msg_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::aruco_ros_opencv::aruco_info_msg_<ContainerAllocator> const> ConstPtr;

}; // struct aruco_info_msg_

typedef ::aruco_ros_opencv::aruco_info_msg_<std::allocator<void> > aruco_info_msg;

typedef boost::shared_ptr< ::aruco_ros_opencv::aruco_info_msg > aruco_info_msgPtr;
typedef boost::shared_ptr< ::aruco_ros_opencv::aruco_info_msg const> aruco_info_msgConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::aruco_ros_opencv::aruco_info_msg_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::aruco_ros_opencv::aruco_info_msg_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace aruco_ros_opencv

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg'], 'aruco_ros_opencv': ['/home/ms/Lynx/src/aruco_ros_opencv/msg'], 'geometry_msgs': ['/opt/ros/indigo/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::aruco_ros_opencv::aruco_info_msg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::aruco_ros_opencv::aruco_info_msg_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::aruco_ros_opencv::aruco_info_msg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::aruco_ros_opencv::aruco_info_msg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::aruco_ros_opencv::aruco_info_msg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::aruco_ros_opencv::aruco_info_msg_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::aruco_ros_opencv::aruco_info_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "caf9570e4375126182b6ee9d6f6127c7";
  }

  static const char* value(const ::aruco_ros_opencv::aruco_info_msg_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xcaf9570e43751261ULL;
  static const uint64_t static_value2 = 0x82b6ee9d6f6127c7ULL;
};

template<class ContainerAllocator>
struct DataType< ::aruco_ros_opencv::aruco_info_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "aruco_ros_opencv/aruco_info_msg";
  }

  static const char* value(const ::aruco_ros_opencv::aruco_info_msg_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::aruco_ros_opencv::aruco_info_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return " 	float32[] x_position\n\
 	float32[] y_position\n\
 	float32[] z_position\n\
 	float32[] tf\n\
	int16[] angle\n\
	uint8[] aruco_id\n\
	uint16 visible_aruco\n\
";
  }

  static const char* value(const ::aruco_ros_opencv::aruco_info_msg_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::aruco_ros_opencv::aruco_info_msg_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.x_position);
      stream.next(m.y_position);
      stream.next(m.z_position);
      stream.next(m.tf);
      stream.next(m.angle);
      stream.next(m.aruco_id);
      stream.next(m.visible_aruco);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct aruco_info_msg_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::aruco_ros_opencv::aruco_info_msg_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::aruco_ros_opencv::aruco_info_msg_<ContainerAllocator>& v)
  {
    s << indent << "x_position[]" << std::endl;
    for (size_t i = 0; i < v.x_position.size(); ++i)
    {
      s << indent << "  x_position[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.x_position[i]);
    }
    s << indent << "y_position[]" << std::endl;
    for (size_t i = 0; i < v.y_position.size(); ++i)
    {
      s << indent << "  y_position[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.y_position[i]);
    }
    s << indent << "z_position[]" << std::endl;
    for (size_t i = 0; i < v.z_position.size(); ++i)
    {
      s << indent << "  z_position[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.z_position[i]);
    }
    s << indent << "tf[]" << std::endl;
    for (size_t i = 0; i < v.tf.size(); ++i)
    {
      s << indent << "  tf[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.tf[i]);
    }
    s << indent << "angle[]" << std::endl;
    for (size_t i = 0; i < v.angle.size(); ++i)
    {
      s << indent << "  angle[" << i << "]: ";
      Printer<int16_t>::stream(s, indent + "  ", v.angle[i]);
    }
    s << indent << "aruco_id[]" << std::endl;
    for (size_t i = 0; i < v.aruco_id.size(); ++i)
    {
      s << indent << "  aruco_id[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.aruco_id[i]);
    }
    s << indent << "visible_aruco: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.visible_aruco);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ARUCO_ROS_OPENCV_MESSAGE_ARUCO_INFO_MSG_H
