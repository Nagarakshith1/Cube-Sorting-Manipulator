// Generated by gencpp from file lynx_control/Lynx.msg
// DO NOT EDIT!


#ifndef LYNX_CONTROL_MESSAGE_LYNX_H
#define LYNX_CONTROL_MESSAGE_LYNX_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace lynx_control
{
template <class ContainerAllocator>
struct Lynx_
{
  typedef Lynx_<ContainerAllocator> Type;

  Lynx_()
    : states()  {
      states.assign(0.0);
  }
  Lynx_(const ContainerAllocator& _alloc)
    : states()  {
  (void)_alloc;
      states.assign(0.0);
  }



   typedef boost::array<float, 6>  _states_type;
  _states_type states;




  typedef boost::shared_ptr< ::lynx_control::Lynx_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::lynx_control::Lynx_<ContainerAllocator> const> ConstPtr;

}; // struct Lynx_

typedef ::lynx_control::Lynx_<std::allocator<void> > Lynx;

typedef boost::shared_ptr< ::lynx_control::Lynx > LynxPtr;
typedef boost::shared_ptr< ::lynx_control::Lynx const> LynxConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::lynx_control::Lynx_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::lynx_control::Lynx_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace lynx_control

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'lynx_control': ['/home/ms/Lynx/src/lynx_control/msg'], 'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::lynx_control::Lynx_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::lynx_control::Lynx_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::lynx_control::Lynx_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::lynx_control::Lynx_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::lynx_control::Lynx_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::lynx_control::Lynx_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::lynx_control::Lynx_<ContainerAllocator> >
{
  static const char* value()
  {
    return "cc004a42f08deecb6cd1bf0d3e91d0cd";
  }

  static const char* value(const ::lynx_control::Lynx_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xcc004a42f08deecbULL;
  static const uint64_t static_value2 = 0x6cd1bf0d3e91d0cdULL;
};

template<class ContainerAllocator>
struct DataType< ::lynx_control::Lynx_<ContainerAllocator> >
{
  static const char* value()
  {
    return "lynx_control/Lynx";
  }

  static const char* value(const ::lynx_control::Lynx_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::lynx_control::Lynx_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32[6] states\n\
";
  }

  static const char* value(const ::lynx_control::Lynx_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::lynx_control::Lynx_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.states);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Lynx_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::lynx_control::Lynx_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::lynx_control::Lynx_<ContainerAllocator>& v)
  {
    s << indent << "states[]" << std::endl;
    for (size_t i = 0; i < v.states.size(); ++i)
    {
      s << indent << "  states[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.states[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // LYNX_CONTROL_MESSAGE_LYNX_H
